/*
 * 创建用户
 *
**/
db.createUser(user, writeConcern)
    user这个文档创建关于用户的身份认证和访问信息；
    writeConcern这个文档描述保证MongoDB提供写操作的成功报告
{
    user: "<name>",                  --用户名
    pwd: "<cleartext password>",     --密码
    customData: {
        <anyinformation>             --任意内容
    },
    roles: [
        {
            role: "<role>",          --用户角色
            db: "<database>"         --数据库名
        }|"<role>",
        ...
    ]
}

 Built-In Roles（内置角色）：
    1. 数据库用户角色：read、readWrite;
    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；
    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；
    4. 备份恢复角色：backup、restore；
    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase
    6. 超级用户角色：root  
    // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）
    7. 内部角色：__system
    PS：关于每个角色所拥有的操作权限可以点击上面的内置角色链接查看详情。


・ writeConcern文档（官方说明<https://docs.mongodb.com/manual/reference/write-concern/>）
    w选项：允许的值分别是 1、0、大于1的值、"majority"、<tag set>；
    j选项：确保mongod实例写数据到磁盘上的journal（日志），这可以确保mongd以外关闭不会丢失数据。设置true启用。
    wtimeout：指定一个时间限制,以毫秒为单位。wtimeout只适用于w值大于1。

例如：
在products数据库创建用户accountAdmin01，并给该用户admin数据库上clusterAdmin和readAnyDatabase的角色，products数据库上readWrite角色。
use products
db.createUser( { "user" : "accountAdmin01",
                 "pwd": "cleartext password",
                 "customData" : { employeeId: 12345 },
                 "roles" : [ { role: "clusterAdmin", db: "admin" },
                             { role: "readAnyDatabase", db: "admin" },
                             "readWrite"
                             ] },
               { w: "majority" , wtimeout: 5000 } )

/****************************************************************************************************************************************/
/*
 * rs.status().stateStr
 *
**/
1. STARTUP：刚加入到复制集中，配置还未加载
2. STARTUP2：配置已加载完，初始化状态
3. RECOVERING：正在恢复，不适用读
4. ARBITER: 仲裁者
5. DOWN：节点不可到达
6. UNKNOWN：未获取其他节点状态而不知是什么状态，一般发生在只有两个成员的架构，脑裂
7. REMOVED：移除复制集
8. ROLLBACK：数据回滚，在回滚结束时，转移到RECOVERING或SECONDARY状态
9. FATAL：出错。查看日志grep “replSet FATAL”找出错原因，重新做同步
10. PRIMARY：主节点
11. SECONDARY：备份节点
/****************************************************************************************************************************************/
/*
 * mongod 参数
 *
**/
mongod的主要参数有：
------------------------------------基本配置----------------------

--quiet 	# 安静输出
--port arg 	# 指定服务端口号，默认端口27017
--bind_ip arg 	# 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP
--logpath arg 	# 指定MongoDB日志文件，注意是指定文件不是目录
--logappend 	# 使用追加的方式写日志
--pidfilepath arg 	# PID File 的完整路径，如果没有设置，则没有PID文件
--keyFile arg 	# 集群的私钥的完整路径，只对于Replica Set 架构有效
--unixSocketPrefix arg 	# UNIX域套接字替代目录,(默认为 /tmp)
--fork 	# 以守护进程的方式运行MongoDB，创建服务器进程
--auth 	# 启用验证
--cpu 	# 定期显示CPU的CPU利用率和iowait
--dbpath arg 	# 指定数据库路径
--diaglog arg 	# diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads
--directoryperdb 	# 设置每个数据库将被保存在一个单独的目录
--journal 	# 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里
--journalOptions arg 	# 启用日志诊断选项
--ipv6 	# 启用IPv6选项
--jsonp 	# 允许JSONP形式通过HTTP访问（有安全影响）
--maxConns arg 	# 最大同时连接数 默认2000
--noauth 	# 不启用验证
--nohttpinterface 	# 关闭http接口，默认关闭27018端口访问
--noprealloc 	# 禁用数据文件预分配(往往影响性能)
--noscripting 	# 禁用脚本引擎
--notablescan 	# 不允许表扫描
--nounixsocket 	# 禁用Unix套接字监听
--nssize arg (=16) 	# 设置信数据库.ns文件大小(MB)
--objcheck 	# 在收到客户数据,检查的有效性，
--profile arg 	# 档案参数 0=off 1=slow, 2=all
--quota 	# 限制每个数据库的文件数，设置默认为8
--quotaFiles arg 	# number of files allower per db, requires --quota
--rest 	# 开启简单的rest API
--repair 	# 修复所有数据库run repair on all dbs
--repairpath arg 	# 修复库生成的文件的目录,默认为目录名称dbpath
--slowms arg (=100) 	# value of slow for profile and console log
--smallfiles 	# 使用较小的默认文件
--syncdelay arg (=60) 	# 数据写入磁盘的时间秒数(0=never,不推荐)
--sysinfo 	# 打印一些诊断系统信息
--upgrade 	# 如果需要升级数据库

-----------------------------------Replicaton 参数--------------------

--fastsync 	# 从一个dbpath里启用从库复制服务，该dbpath的数据库是主库的快照，可用于快速启用同步
--autoresync 	# 如果从库与主库同步数据差得多，自动重新同步，
--oplogSize arg 	# 设置oplog的大小(MB)

---------------------------------* 主/从参数-------------------------

--master 	# 主库模式
--slave 	# 从库模式
--source arg 	# 从库 端口号
--only arg 	# 指定单一的数据库复制
--slavedelay arg 	# 设置从库同步主库的延迟时间

-----------------------------------Replica set(副本集)选项----------------------

--replSet arg 	# 设置副本集名称 

-----------------------------------Sharding(分片)选项------------------------
--configsvr 	# 声明这是一个集群的config服务,默认端口27019，默认目录/data/configdb
--shardsvr 	# 声明这是一个集群的分片,默认端口27018
--noMoveParanoia 	# 关闭偏执为moveChunk数据保存
/****************************************************************************************************************************************/

